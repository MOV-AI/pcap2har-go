name: "CI - On main/dev/release branches"
on:
  pull_request:
    branches:
      - dev
      - main
      - 'releases/**'

jobs:
  Build-package:
    runs-on: ubuntu-20.04
    container:
      image: registry.aws.cloud.mov.ai/qa/ros-buildtools-noetic:v1.1.10
      options: --user root
      credentials:
        username: ${{secrets.PORTUS_APP_USER}}
        password: ${{secrets.PORTUS_APP_TOKEN}}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y libpcap-dev
        rm -rf /usr/local/go && tar -C /usr/local -xzf go1.21.1.linux-amd64.tar.gz

    - name: Build
      run: |
        export PATH=$PATH:/usr/local/go/bin
        make

    - name: Find Package details
      id: vars
      run: |
        PACKAGE_VERSION=$(dpkg-parsechangelog --show-field Version)
        PACKAGE_NAME=$(dpkg-parsechangelog --show-field Source)
        echo ::set-output name=pkg_name::$PACKAGE_NAME
        echo ::set-output name=pkg_version::$PACKAGE_VERSION

    - name: Raise Version
      id: vars-after-raise
      run: |
        PACKAGE_VERSION=${{ steps.vars.outputs.pkg_version }}
        main_version=${PACKAGE_VERSION%-*}
        build_id="${PACKAGE_VERSION#*-}"
        raised_buildid=$(($build_id+1))
        RAISED_PACKAGE_VERSION="$main_version-$raised_buildid"
        echo ::set-output name=pkg_version::$RAISED_PACKAGE_VERSION

    - name: Pack debian
      run: |
        git config --global --add safe.directory $(pwd)
        git config --global user.name '${{ secrets.RAISE_BOT_COMMIT_USER }}'
        git config --global user.email '${{ secrets.RAISE_BOT_COMMIT_MAIL }}'
        apt-get update
        apt-get install -y devscripts equivs git-buildpackage
        # Set the install command to be used by mk-build-deps (use --yes for non-interactive)
        install_tool="apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends --yes"
        # Install build dependencies automatically
        mk-build-deps --install --tool="${install_tool}" debian/control
        # Add version into changelog and commit it
        gbp dch --ignore-branch -N ${{ steps.vars-after-raise.outputs.pkg_version }} -c
        # Build .deb with binaries only
        dpkg-buildpackage -b --unsigned-source --unsigned-changes
        # Store generated .deb
        mkdir artifacts && \
        cp ../*.deb artifacts

    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: artifacts
        path: artifacts/*

    - name: Install package
      run: |
        apt install ../*.deb
